//Elizabeth Stauder (estaude) CPSC 1010-001; 11/09/14;
//the main driver
/*

	Assignment #4
	transform.c file - the main driver
	first calls parseHeader() to get the g_width and g_height
        calls parseImage() to get the pixel data
       	then calls appropriate manipulation function depending on user input:
			1: mirror image
			2: upside-down
			3: rotated to the right 90 degrees
		calls to functions to print the header and the image

	the makefile:
		expects the following files:
			transform.c
			print.c
			mirror.c
			flipHoriz.c
			rotate.c
			(parse.o is included in the files that you copy over; if you do 
			 not write your own parse.c file, you can use the given parse.o 
			 and receive a grade no higher than an 85)
		creates an executable called transform

	to run the program:
		transform 1 twoTigers.ppm > img1.ppm
		transform 2 twoTigers.ppm > img2.ppm
		transform 3 twoTigers.ppm > img3.ppm

*/ 
//#include <stdio.h>
//#include <stdlib.h>
#include "transform.h"

int main (int argc, char *argv[]) 
{
        int search, width, height, color;
        char offset;

	// opening input file

        FILE *infile = fopen(argv[2], "r");
	if(infile == NULL)
	{
	   fprintf(stderr, "Improper Header!\n");
	   exit(1);
	}
   
       search = getc(infile);
       search = getc(infile);

       if (search == '#'){
          while (search != '\n'){
              search = getc(infile);}
           fscanf("%i %i", &width, &height);
       }
       search = getc(infile);
       if (search == '#'){
          while (search != '\n'){
              search = getc(infile);
          }
           fscanf("%i", &color);
       }

       //offset = getc(infile);
       //used to restore colors so you don't get negatives.

	// malloc space for the array (allocation and store pixel data)
        pixel_t * image = 
          (pixel_t*) malloc(sizeof(pixel_t) * g_width * g_height);
          fread (image, sizeof(pixel_t), g_width * g_height, infile);

	// chooses manipulate the image according to command-line parameter
	            if (*argv[1] == '1'){  		
                     // 1: mirror image
                            mirror(g_width, g_height, image);
}
                    else if (*argv[1] == '2'){
	//		2: upside down image
                            flipHoriz(g_width, g_height, image);
}
                    else if (*argv[1] == '3'){
	//		3: rotate to the right 90 degrees
                            rotate(g_width, g_height, image);
}
        print(image);
    
        fclose(infile);

	return 0;
}


	
